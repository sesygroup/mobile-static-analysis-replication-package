theme(axis.title.x = element_blank()) + theme(axis.title.y = element_blank())
#theme(panel.grid.major = element_line(colour = "lightgrey"))
print(plot)
ggsave(filePath, plot, width=figureWidth, height=figureHeight, units="in", scale=1)
setwd("/Users/gianlucascoccia/Desktop/svn/gianluca/MappingStaticAnalysisApps/data/scripts")
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
figuresPath <- "../../paper/figures/"
columnName <- "Macro.analysis.goal"
filePath <- paste(figuresPath, columnName, ".pdf", sep="")
tagsToConsider <- levels(factor(data[[columnName]]))
# se si vuole considerare solo un sottoinsieme dei tag (e.g., solo workshop papers e conference papers),
# specificarli qui sotto e decommentare la riga. Tutto ci?? che non sta qui va nella categoria "Other"
#tagsToConsider <- c("E", "M", "I")
# qui ci vanno le coppie valore-label nel caso in cui vogliamo rinominare alcune label del parametro
prettyPrintedTags <- c("D"="Developer",
"U"="User"
)
yearColumnName <- "Year.of.publication"
idColumnName <- "UID"
othersSupported <- FALSE
figureWidth <- 6
figureHeight <- 3
maxYAxis <- nrow(data) / 2
# DO NOT CHANGE ANYTHING BELOW THIS LINE
separator <- ", "
tagsToConsider <- unlist(unique(as.list(strsplit(paste(tagsToConsider, sep=separator, collapse=separator), separator)[[1]])))
stageData <- function(tbName,tags) {
apply <- ""
cleanName <-gsub("\\.", " ", tbName)
caption <<- paste(apply,cleanName, sep=" ")
column <<- tbName
columnName <<- cleanName
tags <<- tags
cleanTags <<- tags
for(i in 1:length(tags)) {
if(tags[i] %in% names(prettyPrintedTags)) {
cleanTags[i] <- prettyPrintedTags[[tags[i]]]
}
}
cleanTags <<- gsub("\\_", " ", cleanTags)
tagNames <<- cleanTags
}
stageData(columnName,tagsToConsider)
getPrimaryList <- function(currentTag) {
assigned <- subset(data, grepl(currentTag, data[[column]]))[[idColumnName]]
unassigned <<- setdiff(unassigned, assigned)
return(assigned)
}
getPrimaryOccurrences <- function(currentTag, tagName) {
tag <- tagName
year <- subset(data, grepl(currentTag, data[[column]]))[[yearColumnName]]
df <- data.frame(tag, year)
return(df)
}
getRowOther <- function() {
tag <- "Other"
year <- data[[yearColumnName]][data[[idColumnName]] %in% unassigned]
df <- data.frame(tag, year)
return(df)
}
getRowTag <- function(currentTag, currentName) {
currentList <- getPrimaryList(currentTag)
return(c(currentName, currentList, currentTag))
}
occurrences <- data.frame(tag=character(),
year=character(),
stringsAsFactors=TRUE)
unassigned <- data[[idColumnName]]
for(i in 1:length(tags)) {
occurrences <- rbind(occurrences, getPrimaryOccurrences(tags[i], cleanTags[i]))
}
combined <- data.frame(tags, tagNames)
#combined <- combined[order(combined$occurrences, decreasing=T),]
for(i in 1:length(combined$tags)) {
getRowTag(combined$tags[i], combined$tagNames[i])
}
if(othersSupported && length(unassigned != 0)) {
occurrences <- rbind(toPlot, getRowOther())
}
library(ggplot2)
library(plyr)
toPlot <- as.data.frame(table(occurrences))
toPlot$year <- as.numeric(levels(toPlot$year))
plot <- ggplot(toPlot, aes(x=year, y=Freq, fill=tag)) + geom_area(colour="black", size=.2, alpha=.8) +
scale_fill_brewer(palette="Greys", breaks=rev(levels(as.factor(toPlot$tag)))) +
scale_y_continuous(limits = c(0, maxYAxis)) +
scale_x_continuous(breaks = round(seq(min(toPlot$year), max(toPlot$year), by = 1),1)) +
theme_classic() + theme(legend.title=element_blank()) + theme(legend.position="bottom") +
theme(axis.title.x = element_blank()) + theme(axis.title.y = element_blank())
#theme(panel.grid.major = element_line(colour = "lightgrey"))
print(plot)
ggsave(filePath, plot, width=figureWidth, height=figureHeight, units="in", scale=1)
library(ggplot2)
library(plyr)
setwd("/Users/gianlucascoccia/Desktop/svn/gianluca/MappingStaticAnalysisApps/data/scripts")
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
columnName <- "Year.of.publication"
idColumnName <- "UID"
xLabel <- "Year"
yLabel <- "# of primary studies"
figuresPath <- "../../paper/figures/"
filePath <- paste(figuresPath, columnName, ".pdf", sep="")
counts <- count(data[columnName])
countVals <- counts["freq"]
# Basic line graph
plot <- ggplot(data=counts, aes(y=countVals, x=counts[columnName], group=1)) +
geom_line() +
geom_point() +
geom_text(data = counts, aes(label = countVals, vjust=-1.1)) +
scale_x_continuous(breaks = counts[[columnName]]) +
scale_y_continuous(limits = c(min(countVals),max(countVals) + 3)) +
xlab(xLabel) + ylab(yLabel)
print(plot)
library(ggplot2)
library(plyr)
setwd("/Users/gianlucascoccia/Desktop/svn/gianluca/MappingStaticAnalysisApps/data/scripts")
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
columnName <- "Macro.analysis.goal"
idColumnName <- "UID"
xLabel <- "Year"
yLabel <- "# of primary studies"
figuresPath <- "../../paper/figures/"
filePath <- paste(figuresPath, columnName, ".pdf", sep="")
counts <- count(data[columnName])
countVals <- counts["freq"]
# Basic line graph
plot <- ggplot(data=counts, aes(y=countVals, x=counts[columnName], group=1)) +
geom_line() +
geom_point() +
geom_text(data = counts, aes(label = countVals, vjust=-1.1)) +
scale_x_continuous(breaks = counts[[columnName]]) +
scale_y_continuous(limits = c(min(countVals),max(countVals) + 3)) +
xlab(xLabel) + ylab(yLabel)
print(plot)
library(ggplot2)
library(plyr)
setwd("/Users/gianlucascoccia/Desktop/svn/gianluca/MappingStaticAnalysisApps/data/scripts")
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
columnName <- "Macro.analysis.goal"
idColumnName <- "UID"
xLabel <- "Year"
yLabel <- "# of primary studies"
figuresPath <- "../../paper/figures/"
filePath <- paste(figuresPath, columnName, ".pdf", sep="")
counts <- count(data[columnName])
countVals <- counts["freq"]
# Basic line graph
plot <- ggplot(data=counts, aes(y=countVals, x=counts[columnName], group=1)) +
geom_line() +
geom_point() +
geom_text(data = counts, aes(label = countVals, vjust=-1.1)) +
scale_x_continuous(breaks = counts[[columnName]]) +
scale_y_continuous(limits = c(min(countVals),max(countVals) + 3)) +
xlab(xLabel) + ylab(yLabel)
library(ggplot2)
library(plyr)
setwd("/Users/gianlucascoccia/Desktop/svn/gianluca/MappingStaticAnalysisApps/data/scripts")
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
columnName <- "Macro.analysis.goal"
idColumnName <- "UID"
xLabel <- "Year"
yLabel <- "# of primary studies"
figuresPath <- "../../paper/figures/"
filePath <- paste(figuresPath, columnName, ".pdf", sep="")
counts <- count(data[columnName])
countVals <- counts["freq"]
# Basic line graph
plot <- ggplot(data=counts, aes(y=countVals, x=counts[columnName], group=1)) +
geom_line() +
geom_point() +
geom_text(data = counts, aes(label = countVals, vjust=-1.1)) +
scale_x_continuous(breaks = counts[[columnName]]) +
scale_y_continuous(limits = c(min(countVals),max(countVals) + 3)) +
xlab(xLabel) + ylab(yLabel)
print(plot)
library(ggplot2)
library(plyr)
setwd("/Users/gianlucascoccia/Desktop/svn/gianluca/MappingStaticAnalysisApps/data/scripts")
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
columnName <- "Macro.analysis.goal"
idColumnName <- "UID"
xLabel <- "Year"
yLabel <- "# of primary studies"
figuresPath <- "../../paper/figures/"
filePath <- paste(figuresPath, columnName, ".pdf", sep="")
counts <- count(data[columnName])
countVals <- counts["freq"]
# Basic line graph
plot <- ggplot(data=counts, aes(y=countVals, x=counts[columnName], group=1)) +
geom_line() +
geom_point() +
geom_text(data = counts, aes(label = countVals, vjust=-1.1)) +
scale_x_continuous(breaks = counts[[columnName]]) +
scale_y_continuous(limits = c(min(countVals),max(countVals) + 3)) +
xlab(xLabel) + ylab(yLabel)
print(plot)
# Basic line graph
plot <- ggplot(data=counts, aes(y=countVals, x=counts[columnName], group=1)) +
geom_line() +
geom_point() +
geom_text(data = counts, aes(label = countVals, vjust=-1.1)) +
scale_x_continuous(breaks = counts[[columnName]]) +
scale_y_continuous(limits = c(min(countVals),max(countVals) + 3)) +
xlab(xLabel) + ylab(yLabel)
print(plot)
# Line chart
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
# name of the X and Y axis labels
xLabel <- "X"
yLabel <- "Y"
# name of the column of interest
columnName <- "Year.of.publication"
# one element for each possible year
yearsInt <- c(min(data[[columnName]]):max(data[[columnName]]))#c("2006","2007","2008","2009","2010", "2011","2012","2013","2014", "2015")
years <- as.factor(yearsInt)
# twin array of possibleValue storing the values of each possible element
counts <- vector("integer", length(years))
for (i in 1:length(years)) {
counts[i] <- 0
}
# the labels to be used in the line chart
labels <- ""
# counting the elements for each possible value
for (el in data[[columnName]]) {
for (i in 1:length(years)) {
if(grepl(years[i], el)) {
counts[i] <- as.integer(counts[i]) + 1
}
}
}
"%", sep="") # add percents to labels
labels <- counts
labels <- counts
# counting the elements for each possible value
for (el in data[[columnName]]) {
for (i in 1:length(years)) {
if(grepl(years[i], el)) {
counts[i] <- as.integer(counts[i]) + 1
}
}
}
library(ggplot2)
xSize <- 7.5
ySize <- 3
marginLeft <- 0
marginBottom <- 0
marginTop <- 0
marginRight <- 0
fileName <- "./years.pdf"
cairo_pdf(fileName, width=xSize, height=ySize)
par(mar=c(marginBottom, marginLeft, marginTop, marginRight))
par(mfrow=c(1, 1))
par(las=1)
# create the dataframe
df.papers <- data.frame(years,counts)
library(cowplot)
# in p now we have the final plot
p =ggplot(data=df.papers, aes(x=years, y=counts, group=1)) +
geom_text(data=df.papers,aes(x=years,y=counts,label=labels),size=3, alpha=1, lineheight=1, vjust=-1.2,hjust=.5) +
labs(x=xLabel, y=yLabel) +
theme_cowplot() +
geom_point(size=3) +
ylim(0, max(counts) + 10) +
#coord_fixed(ratio=.1) +
geom_line(data=subset(df.papers, years != "2017")) +
geom_line(linetype="dashed", data=subset(df.papers, years = "2017")) +
theme(axis.line = element_line(color = 'black'), axis.text.y = element_text(size=10), axis.text.x = element_text(size=10))
print(p)
dev.off()
# Line chart
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
# name of the X and Y axis labels
xLabel <- "Year"
yLabel <- "# of primary studies"
# name of the column of interest
columnName <- "Year.of.publication"
# one element for each possible year
yearsInt <- c(min(data[[columnName]]):max(data[[columnName]]))#c("2006","2007","2008","2009","2010", "2011","2012","2013","2014", "2015")
years <- as.factor(yearsInt)
#############################################################################
# twin array of possibleValue storing the values of each possible element
counts <- vector("integer", length(years))
for (i in 1:length(years)) {
counts[i] <- 0
}
# the labels to be used in the line chart
labels <- ""
# counting the elements for each possible value
for (el in data[[columnName]]) {
for (i in 1:length(years)) {
if(grepl(years[i], el)) {
counts[i] <- as.integer(counts[i]) + 1
}
}
}
# lastYear = counts[length(counts)]
# lastYearPercentage = round(lastYear/sum(counts) * 100, 2)
# compute the factor to which elements values must be scaled
#pct <- round(counts/sum(counts) * 100, 1)
#pct[length(pct)] <- pct[length(pct)] + 0.1
# we add the percentages to the labels
#labels <- paste(counts, "\n", pct, "%", sep="") # add percents to labels
labels <- counts
#labels <- sub("0\n0%", "", labels)
# load the library ggplot2
library(ggplot2)
xSize <- 7.5
ySize <- 3
marginLeft <- 0
marginBottom <- 0
marginTop <- 0
marginRight <- 0
fileName <- "../../paper/figures/YearOfPublication.pdf"
cairo_pdf(fileName, width=xSize, height=ySize)
par(mar=c(marginBottom, marginLeft, marginTop, marginRight))
par(mfrow=c(1, 1))
par(las=1)
# create the dataframe
df.papers <- data.frame(years,counts)
library(cowplot)
# in p now we have the final plot
p =ggplot(data=df.papers, aes(x=years, y=counts, group=1)) +
geom_text(data=df.papers,aes(x=years,y=counts,label=labels),size=3, alpha=1, lineheight=1, vjust=-1.2,hjust=.5) +
labs(x=xLabel, y=yLabel) +
theme_cowplot() +
geom_point(size=3) +
ylim(0, max(counts) + 10) +
#coord_fixed(ratio=.1) +
geom_line(data=subset(df.papers, years != "2017")) +
geom_line(linetype="dashed", data=subset(df.papers, years = "2017")) +
theme(axis.line = element_line(color = 'black'), axis.text.y = element_text(size=10), axis.text.x = element_text(size=10))
print(p)
dev.off()
# Line chart
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
# name of the X and Y axis labels
xLabel <- "Year"
yLabel <- "# of primary studies"
# name of the column of interest
columnName <- "Year.of.publication"
# one element for each possible year
yearsInt <- c(min(data[[columnName]]):max(data[[columnName]]))#c("2006","2007","2008","2009","2010", "2011","2012","2013","2014", "2015")
years <- as.factor(yearsInt)
#############################################################################
# twin array of possibleValue storing the values of each possible element
counts <- vector("integer", length(years))
for (i in 1:length(years)) {
counts[i] <- 0
}
# the labels to be used in the line chart
labels <- ""
# counting the elements for each possible value
for (el in data[[columnName]]) {
for (i in 1:length(years)) {
if(grepl(years[i], el)) {
counts[i] <- as.integer(counts[i]) + 1
}
}
}
# lastYear = counts[length(counts)]
# lastYearPercentage = round(lastYear/sum(counts) * 100, 2)
# compute the factor to which elements values must be scaled
#pct <- round(counts/sum(counts) * 100, 1)
#pct[length(pct)] <- pct[length(pct)] + 0.1
# we add the percentages to the labels
#labels <- paste(counts, "\n", pct, "%", sep="") # add percents to labels
labels <- counts
#labels <- sub("0\n0%", "", labels)
# load the library ggplot2
library(ggplot2)
xSize <- 7.5
ySize <- 3
marginLeft <- 0
marginBottom <- 0
marginTop <- 0
marginRight <- 0
fileName <- "../../paper/figures/YearOfPublication.pdf"
cairo_pdf(fileName, width=xSize, height=ySize)
par(mar=c(marginBottom, marginLeft, marginTop, marginRight))
par(mfrow=c(1, 1))
par(las=1)
# create the dataframe
df.papers <- data.frame(years,counts)
library(cowplot)
# in p now we have the final plot
p =ggplot(data=df.papers, aes(x=years, y=counts, group=1)) +
geom_text(data=df.papers,aes(x=years,y=counts,label=labels),size=3, alpha=1, lineheight=1, vjust=-1.2,hjust=.5) +
labs(x=xLabel, y=yLabel) +
theme_cowplot() +
geom_point(size=3) +
ylim(0, max(counts) + 10) +
#coord_fixed(ratio=.1) +
geom_line(data=subset(df.papers, years != "2017")) +
geom_line(linetype="dashed", data=subset(df.papers, years = "2017")) +
theme(axis.line = element_line(color = 'black'), axis.text.y = element_text(size=10), axis.text.x = element_text(size=10))
print(p)
dev.off()
fileName <- "../../paper/figures/MacroContributionTypeIstogram.pdf"
p =ggplot(data=df.papers, aes(x=years, y=counts, group=1)) +
geom_histogram()
print(p)
p =ggplot(data=df.papers, aes(x=counts, group=1)) +
geom_histogram()
print(p)
ggplot(data=df.papers, aes(x=counts, group=1)) +
geom_histogram()
counts
ggplot(data=df.papers, aes(x=counts, group=1, bincount=7)) +
geom_histogram()
ggplot(data=df.papers, aes(x=counts, group=1, bins=7)) +
geom_histogram()
ggplot(data=df.papers, aes(x=counts, group=1, binwidth=7)) +
geom_histogram()
ggplot(data=df.papers, aes(x=counts, group=1)) +
geom_histogram(bins=7)
nal plot
ggplot(data=df.papers, aes(x=counts, group=1)) +
geom_histogram(binwidth=7)
plot
ggplot(data=df.papers, aes(x=counts, group=1)) +
geom_histogram(binwidth=10)
data
View(data)
columnName <- "Macro.analysis.goal"
# Line chart
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
# name of the X and Y axis labels
xLabel <- "Year"
yLabel <- "# of primary studies"
# name of the column of interest
columnName <- "Macro.analysis.goal"
fileName <- "../../paper/figures/MacroContributionTypeIstogram.pdf"
# one element for each possible year
yearsInt <- c(min(data[[columnName]]):max(data[[columnName]]))#c("2006","2007","2008","2009","2010", "2011","2012","2013","2014", "2015")
years <- as.factor(yearsInt)
#############################################################################
# twin array of possibleValue storing the values of each possible element
counts <- vector("integer", length(years))
for (i in 1:length(years)) {
counts[i] <- 0
}
# the labels to be used in the line chart
labels <- ""
# counting the elements for each possible value
for (el in data[[columnName]]) {
for (i in 1:length(years)) {
if(grepl(years[i], el)) {
counts[i] <- as.integer(counts[i]) + 1
}
}
}
# lastYear = counts[length(counts)]
# lastYearPercentage = round(lastYear/sum(counts) * 100, 2)
# compute the factor to which elements values must be scaled
#pct <- round(counts/sum(counts) * 100, 1)
#pct[length(pct)] <- pct[length(pct)] + 0.1
# we add the percentages to the labels
#labels <- paste(counts, "\n", pct, "%", sep="") # add percents to labels
labels <- counts
#labels <- sub("0\n0%", "", labels)
# load the library ggplot2
library(ggplot2)
xSize <- 7.5
ySize <- 3
marginLeft <- 0
marginBottom <- 0
marginTop <- 0
marginRight <- 0
cairo_pdf(fileName, width=xSize, height=ySize)
par(mar=c(marginBottom, marginLeft, marginTop, marginRight))
par(mfrow=c(1, 1))
par(las=1)
# create the dataframe
df.papers <- data.frame(years,counts)
library(cowplot)
# in p now we have the final plot
ggplot(data=df.papers, aes(x=counts, group=1)) +
geom_histogram(binwidth=10)
# geom_text(data=df.papers,aes(x=years,y=counts,label=labels),size=3, alpha=1, lineheight=1, vjust=-1.2,hjust=.5) +
# labs(x=xLabel, y=yLabel) +
# theme_cowplot() +
# geom_point(size=3) +
# ylim(0, max(counts) + 10) +
# #coord_fixed(ratio=.1) +
# geom_line(data=subset(df.papers, years != "2017")) +
# geom_line(linetype="dashed", data=subset(df.papers, years = "2017")) +
# theme(axis.line = element_line(color = 'black'), axis.text.y = element_text(size=10), axis.text.x = element_text(size=10))
print(p)
dev.off()
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
# name of the X and Y axis labels
xLabel <- "Year"
yLabel <- "# of primary studies"
# name of the column of interest
columnName <- "Macro.analysis.goal"
fileName <- "../../paper/figures/MacroContributionTypeIstogram.pdf"
# one element for each possible year
yearsInt <- c(min(data[[columnName]]):max(data[[columnName]]))#c("2006","2007","2008","2009","2010", "2011","2012","2013","2014", "2015")
years <- as.factor(yearsInt)
data <- read.csv("../rawData/data.csv", header = TRUE, quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.strings = "-")
# name of the X and Y axis labels
xLabel <- "Year"
yLabel <- "# of primary studies"
# name of the column of interest
columnName <- "Macro.analysis.goal"
fileName <- "../../paper/figures/MacroContributionTypeIstogram.pdf"
# one element for each possible year
yearsInt <- c(min(data[[columnName]]):max(data[[columnName]]))#c("2006","2007","2008","2009","2010", "2011","2012","2013","2014", "2015")
years <- as.factor(yearsInt)
min(data[[columnName]])
data[[columnName]]
data[[columnName]]
